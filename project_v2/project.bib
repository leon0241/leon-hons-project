@article{abadiCalculusCryptographicProtocols1999,
  title = {A {{Calculus}} for {{Cryptographic Protocols}}: {{The Spi Calculus}}},
  shorttitle = {A {{Calculus}} for {{Cryptographic Protocols}}},
  author = {Abadi, Mart{\'{\i}}n and Gordon, Andrew D.},
  year = {1999},
  month = jan,
  journal = {Information and Computation},
  volume = {148},
  number = {1},
  pages = {1--70},
  issn = {0890-5401},
  doi = {10.1006/inco.1998.2740},
  urldate = {2024-10-17},
  abstract = {We introduce the spi calculus, an extension of the pi calculus designed for describing and analyzing cryptographic protocols. We show how to use the spi calculus, particularly for studying authentication protocols. The pi calculus (without extension) suffices for some abstract protocols; the spi calculus enables us to consider cryptographic issues in more detail. We represent protocols as processes in the spi calculus and state their security properties in terms of coarse-grained notions of protocol equivalence.},
  file = {/home/leon/Zotero/storage/MG7BMTWU/S0890540198927407.html}
}

@article{baetenBriefHistoryProcess2005,
  title = {A Brief History of Process Algebra},
  author = {Baeten, J. C. M.},
  year = {2005},
  month = may,
  journal = {Theoretical Computer Science},
  series = {Process {{Algebra}}},
  volume = {335},
  number = {2},
  pages = {131--146},
  issn = {0304-3975},
  doi = {10.1016/j.tcs.2004.07.036},
  urldate = {2024-10-17},
  abstract = {This note addresses the history of process algebra as an area of research in concurrency theory, the theory of parallel and distributed systems in computer science. Origins are traced back to the early seventies of the twentieth century, and developments since that time are sketched. The author gives his personal views on these matters. He also considers the present situation, and states some challenges for the future. Note: Also report CS-R 04-02, Department of Mathematics and Computer Science, Technische Universiteit Eindhoven, http://www.win.tue.nl/fm/pubbaeten.html.},
  keywords = {History,Process algebra},
  file = {/home/leon/Zotero/storage/T3UYY9AA/Baeten - 2005 - A brief history of process algebra.pdf;/home/leon/Zotero/storage/2CQWSYC7/S0304397505000307.html}
}

@book{baetenProcessAlgebra1990,
  title = {Process {{Algebra}}},
  author = {Baeten, J. C. M. and Weijland, W. P.},
  year = {1990},
  series = {Cambridge {{Tracts}} in {{Theoretical Computer Science}}},
  publisher = {Cambridge University Press},
  address = {Cambridge},
  doi = {10.1017/CBO9780511624193},
  urldate = {2024-12-09},
  abstract = {This is an introduction to process algebra, also known as the Algebra of Communicating Processes (ACP). It is a self-contained mathematical approach to the theory which can be used for graduate courses, though it also has material of interest to researchers. It is a unique introduction to this model of concurrent programming and will be essential reading for all computer scientists interested in parallel processing and algebraic methods in computer science.},
  file = {/home/leon/Zotero/storage/PVGQYV5X/EA22608BF7C1B6E44C9394474482C31C.html}
}

@inproceedings{bergstraACPtUniversalAxiom1989,
  title = {{{ACP$\tau$}} a Universal Axiom System for Process Specification},
  booktitle = {Algebraic {{Methods}}: {{Theory}}, {{Tools}} and {{Applications}}},
  author = {Bergstra, J. A. and Klop, J. W.},
  editor = {Wirsing, Martin and Bergstra, Jan A.},
  year = {1989},
  pages = {445--463},
  publisher = {Springer Berlin Heidelberg},
  address = {Berlin, Heidelberg},
  abstract = {Starting with Basic Process Algebra (BPA), an axiom system for alternative composition (+) and sequential composition ({$\cdot$}) of processes, we give a presentation in several intermediate stages leading to ACP{$\tau$}, Algebra of Communicating Processes with abstraction. At each successive stage an example is given showing that the specification power is increased. Also some graph models for the respective axiom systems are informally presented. We conclude with the Finite Specification Theorem for ACP{$\tau$}, stating that each finitely branching, effectively presented process (as an element of the graph model) can be specified in ACP{$\tau$} by means of a finite system of guarded recursion equations.},
  isbn = {978-3-540-46758-8},
  file = {/home/leon/Zotero/storage/EGBKNEHS/Bergstra and Klop - 1989 - ACPÏ„ a universal axiom system for process specification.pdf}
}

@article{bergstraAlgebraicApproachConcurrency,
  title = {An {{Algebraic Approach}} to {{Concurrency}}},
  author = {Bergstra, J A and Klop, J W and {van Glabbeek}, R and Vaandrager, F},
  langid = {english},
  file = {/home/leon/Zotero/storage/RGCIZQ3I/Bergstra et al. - An Algebraic Approach to Concurrency.pdf}
}

@article{bergstraProcessAlgebraSynchronous1984,
  title = {Process Algebra for Synchronous Communication},
  author = {Bergstra, J. A. and Klop, J. W.},
  year = {1984},
  month = jan,
  journal = {Information and Control},
  volume = {60},
  number = {1},
  pages = {109--137},
  issn = {0019-9958},
  doi = {10.1016/S0019-9958(84)80025-X},
  urldate = {2024-10-17},
  abstract = {Within the context of an algebraic theory of processes, an equational specification of process cooperation is provided. Four cases are considered: free merge or interleaving, merging with communication, merging with mutual exclusion of tight regions, and synchronous process cooperation. The rewrite system behind the communication algebra is shown to be confluent and terminating (modulo its permutative reductions). Further, some relationships are shown to hold between the four concepts of merging.},
  file = {/home/leon/Zotero/storage/34W2HZYM/Bergstra and Klop - 1984 - Process algebra for synchronous communication.pdf;/home/leon/Zotero/storage/UYD5MAKT/S001999588480025X.html}
}

@article{brookesTheoryCommunicatingSequential1984,
  title = {A {{Theory}} of {{Communicating Sequential Processes}}},
  author = {Brookes, S. D. and Hoare, C. A. R. and Roscoe, A. W.},
  year = {1984},
  month = jun,
  journal = {J. ACM},
  volume = {31},
  number = {3},
  pages = {560--599},
  issn = {0004-5411},
  doi = {10.1145/828.833},
  urldate = {2024-10-17},
  abstract = {A mathematical model for communicating sequential processes is given, and a number of its interesting and useful properties are stated and proved. The possibilities of nondetermimsm are fully taken into account.},
  file = {/home/leon/Zotero/storage/ZZ8KXRVL/Brookes et al. - 1984 - A Theory of Communicating Sequential Processes.pdf}
}

@inproceedings{cardelliMobileAmbients1998,
  title = {Mobile Ambients},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Cardelli, Luca and Gordon, Andrew D.},
  editor = {Nivat, Maurice},
  year = {1998},
  pages = {140--155},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/BFb0053547},
  abstract = {We introduce a calculus describing the movement of processes and devices, in- cluding movement through administrative domains.},
  isbn = {978-3-540-69720-6},
  langid = {english},
  keywords = {Mobile Agent,Objective Move,Operational Semantic,Reduction Rule,Turing Machine},
  file = {/home/leon/Zotero/storage/QK82QJLN/Cardelli and Gordon - 1998 - Mobile ambients.pdf}
}

@incollection{cleavelandCHAPTER6Equivalence2001,
  title = {{{CHAPTER}} 6 - {{Equivalence}} and {{Preorder Checking}} for {{Finite-State Systems}}},
  booktitle = {Handbook of {{Process Algebra}}},
  author = {Cleaveland, Rance and Sokolsky, Oleg},
  editor = {Bergstra, J. A. and Ponse, A. and Smolka, S. A.},
  year = {2001},
  month = jan,
  pages = {391--424},
  publisher = {Elsevier Science},
  address = {Amsterdam},
  doi = {10.1016/B978-044482830-9/50024-2},
  urldate = {2024-12-09},
  abstract = {This chapter surveys algorithms for computing semantic equivalences and refinement relations, or preorders, over states in finite-state labeled transitions systems. Methods for calculating a general equivalence, namely bisimulation equivalence, and a general preorder are described and shown to be useful as a basis for calculating other semantic relations as well. Two general classes of algorithms are considered: global ones, which require the a priori construction of the state space but are generally more efficient in the asymptotic case, and local, or on-the-fly ones, which avoid the construction of unnecessary states while incurring some additional computational overhead.},
  isbn = {978-0-444-82830-9},
  file = {/home/leon/Zotero/storage/M5WFFCA8/B9780444828309500242.html}
}

@inproceedings{DBLP:conf/fossacs/Glabbeek18,
  title = {A Theory of Encodings and Expressiveness (Extended Abstract) - (Extended Abstract)},
  booktitle = {Foundations of Software Science and Computation Structures - 21st International Conference, {{FOSSACS}} 2018, Held as Part of the European Joint Conferences on Theory and Practice of Software, {{ETAPS}} 2018, Thessaloniki, Greece, April 14-20, 2018, Proceedings},
  author = {{van Glabbeek}, Rob},
  editor = {Baier, Christel and Lago, Ugo Dal},
  year = {2018},
  series = {Lecture Notes in Computer Science},
  volume = {10803},
  pages = {183--202},
  publisher = {Springer},
  doi = {10.1007/978-3-319-89366-2\_10},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  timestamp = {Sun, 04 Aug 2024 19:40:23 +0200}
}

@article{engbergCalculusCommunicatingSystems1986,
  title = {A {{Calculus}} of {{Communicating Systems}} with {{Label Passing}}},
  author = {Engberg, Uffe and Nielsen, Mogens},
  year = {1986},
  month = may,
  journal = {DAIMI Report Series},
  number = {208},
  issn = {2245-9316},
  doi = {10.7146/dpb.v15i208.7559},
  urldate = {2024-10-17},
  abstract = {Milner's Calculus of  Communicating Systems (CCS) is extended with a mechanism for label passing - as an attempt to remedy some of the shortcomings of CCS w.r.t. dynamic change of agent interconnections. In the extended calculus, restriction is viewed formally as a binder, and the calculus allows dynamic change of scope (of label) in connection with communication. It is proved that algebraic properties of strong (and observational) equivalence for CCS are preserved by the extension.  Examples illustrating the expressive power of the calculus and its  methods for reasoning are given.},
  copyright = {Copyright (c)},
  langid = {english},
  file = {/home/leon/Zotero/storage/3GFSRH8N/Engberg and Nielsen - 1986 - A Calculus of Communicating Systems with Label Passing.pdf}
}

@article{fokkinkRootedBranchingBisimulation2000,
  title = {Rooted {{Branching Bisimulation}} as a {{Congruence}}},
  author = {Fokkink, Wan},
  year = {2000},
  month = feb,
  journal = {Journal of Computer and System Sciences},
  volume = {60},
  number = {1},
  pages = {13--37},
  issn = {0022-0000},
  doi = {10.1006/jcss.1999.1663},
  urldate = {2024-12-09},
  abstract = {This article presents a congruence format, in structural operational semantics, for rooted branching bisimulation equivalence. The format imposes additional requirements on Groote's ntyft format. It extends an earlier format by Bloom with standard notions such as recursion, iteration, predicates, and negative premises.},
  file = {/home/leon/Zotero/storage/F63ZFWH2/Fokkink - 2000 - Rooted Branching Bisimulation as a Congruence.pdf;/home/leon/Zotero/storage/H8L6U5BB/S002200009991663X.html}
}

@misc{glabbeekMusingsEncodingsExpressiveness2012,
  title = {Musings on {{Encodings}} and {{Expressiveness}}},
  author = {van Glabbeek, Rob},
  year = {2012},
  month = aug,
  number = {arXiv:1208.2750},
  eprint = {1208.2750},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1208.2750},
  urldate = {2024-10-17},
  abstract = {This paper proposes a definition of what it means for one system description language to encode another one, thereby enabling an ordering of system description languages with respect to expressive power. I compare the proposed definition with other definitions of encoding and expressiveness found in the literature, and illustrate it on a case study: comparing the expressive power of CCS and CSP.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science},
  file = {/home/leon/Zotero/storage/VF6SYCVC/Glabbeek - 2012 - Musings on Encodings and Expressiveness.pdf;/home/leon/Zotero/storage/FVEM82H6/1208.html}
}

@article{gorlaUnifiedApproachEncodability2010,
  title = {Towards a Unified Approach to Encodability and Separation Results for Process Calculi},
  author = {Gorla, Daniele},
  year = {2010},
  month = sep,
  journal = {Information and Computation},
  volume = {208},
  number = {9},
  pages = {1031--1053},
  issn = {0890-5401},
  doi = {10.1016/j.ic.2010.05.002},
  urldate = {2024-10-17},
  abstract = {We present a unified approach to evaluate the relative expressive power of process calculi. In particular, we identify a small set of criteria (that have already been somehow presented in the literature) that an encoding should satisfy to be considered a valid means for language comparison. We argue that the combination of such criteria is a valid proposal by noting that: (i) several well-known encodings appeared in the literature satisfy them; (ii) this notion is not trivial, because some known encodings do not satisfy all the criteria we have proposed; (iii) several well-known separation results can be formulated in terms of our criteria; and (iv) some widely believed (but never formally proved) separation results can be proved by using the criteria we propose. Moreover, the criteria defined induce general proof-techniques for separation results that can be easily instantiated to cover known case-studies.},
  keywords = {Encodings,Expressiveness,Process calculi}
}

@misc{hatzelEncodingCSPCCS2015,
  title = {Encoding {{CSP}} into {{CCS}}},
  author = {Hatzel, Meike and Wagner, Christoph and Peters, Kirstin and Nestmann, Uwe},
  year = {2015},
  month = aug,
  number = {arXiv:1508.06712},
  eprint = {1508.06712},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1508.06712},
  urldate = {2024-10-17},
  abstract = {We study encodings from CSP into asynchronous CCS with name passing and matching, so in fact, the asynchronous pi-calculus. By doing so, we discuss two different ways to map the multi-way synchronisation mechanism of CSP into the two-way synchronisation mechanism of CCS. Both encodings satisfy the criteria of Gorla except for compositionality, as both use an additional top-level context. Following the work of Parrow and Sj{\textbackslash}"odin, the first encoding uses a centralised coordinator and establishes a variant of weak bisimilarity between source terms and their translations. The second encoding is decentralised, and thus more efficient, but ensures only a form of coupled similarity between source terms and their translations.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science},
  file = {/home/leon/Zotero/storage/FHDC3NZL/Hatzel et al. - 2015 - Encoding CSP into CCS.pdf;/home/leon/Zotero/storage/9XG4MWHM/1508.html}
}

@article{MILNER19921,
  title = {A Calculus of Mobile Processes, {{I}}},
  author = {Milner, Robin and Parrow, Joachim and Walker, David},
  year = {1992},
  journal = {Information and Computation},
  volume = {100},
  number = {1},
  pages = {1--40},
  issn = {0890-5401},
  doi = {10.1016/0890-5401(92)90008-4},
  abstract = {We present the {$\pi$}-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The {$\pi$}-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the {$\pi$}-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the {$\pi$}-calculus of higher-order functions (the {$\lambda$}-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions---i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed.}
}

@book{milnerCalculusCommunicatingSystems1980,
  title = {A {{Calculus}} of {{Communicating Systems}}},
  author = {Milner, Robin},
  year = {1980},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {92},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/3-540-10235-3},
  urldate = {2024-10-17},
  copyright = {http://www.springer.com/tdm},
  isbn = {978-3-540-10235-9 978-3-540-38311-6},
  keywords = {Calc,calculus,communication,data structure,data structures,Equivalence,model,proof,semantics,techniques},
  file = {/home/leon/Zotero/storage/E3HUZ6KJ/Milner - 1980 - A Calculus of Communicating Systems.pdf}
}

@inproceedings{nestmannWelcomeJungleSubjective2006,
  title = {Welcome to the {{Jungle}}: {{A Subjective Guide}} to {{Mobile Process Calculi}}},
  shorttitle = {Welcome to the {{Jungle}}},
  booktitle = {{{CONCUR}} 2006 -- {{Concurrency Theory}}},
  author = {Nestmann, Uwe},
  editor = {Baier, Christel and Hermanns, Holger},
  year = {2006},
  pages = {52--63},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/11817949_4},
  abstract = {Almost 30 years ago, the research on process calculi gained a lot of momentum with the invention of ACP, CCS and CSP. Later on, but also already 20 years ago, researchers started to consider so-called mobile variants of process calculi, in which communication channels were themselves treated as the exchanged data. The original Pi us arose out of a reformulation and extension of CCS. In turn, it boosted the invention and study of a whole zoo of further process calculi.},
  isbn = {978-3-540-37377-3},
  langid = {english},
  keywords = {Expressive Power,Label Semantic,Lambda Calculus,Mobile Process,Process Calculus},
  file = {/home/leon/Zotero/storage/58N6VAEY/Nestmann - 2006 - Welcome to the Jungle A Subjective Guide to Mobile Process Calculi.pdf}
}

@article{parrowExpressivenessProcessAlgebras2008,
  title = {Expressiveness of {{Process Algebras}}},
  author = {Parrow, Joachim},
  year = {2008},
  month = apr,
  journal = {Electronic Notes in Theoretical Computer Science},
  series = {Proceedings of the {{LIX Colloquium}} on {{Emerging Trends}} in {{Concurrency Theory}} ({{LIX}} 2006)},
  volume = {209},
  pages = {173--186},
  issn = {1571-0661},
  doi = {10.1016/j.entcs.2008.04.011},
  urldate = {2024-10-17},
  abstract = {We examine ways to measure expressiveness of process algebras, and recapitulate and compare some related results from the literature.},
  keywords = {expressiveness,Process algebra}
}

@inproceedings{parrowFusionCalculusExpressiveness1998,
  title = {The Fusion Calculus: Expressiveness and Symmetry in Mobile Processes},
  shorttitle = {The Fusion Calculus},
  booktitle = {Proceedings. {{Thirteenth Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{Cat}}. {{No}}.{{98CB36226}})},
  author = {Parrow, J. and Victor, B.},
  year = {1998},
  month = jun,
  pages = {176--185},
  issn = {1043-6871},
  doi = {10.1109/LICS.1998.705654},
  urldate = {2024-10-17},
  abstract = {We present the fusion calculus as a significant step towards a canonical calculus of concurrency. It simplifies and extends the /spl pi/-calculus. The fusion calculus contains the polyadic /spl pi/-calculus as a proper subcalculus and thus inherits all its expressive power. The gain is that fusion contains actions akin to updating a shared state, and a scoping construct for bounding their effects. Therefore it is easier to represent computational models such as concurrent constraints formalisms. It is also easy to represent the so called strong reduction strategies in the /spl lambda/-calculus, involving reduction under abstraction. In the /spl lambda/-calculus these tasks require elaborate encodings. Our results on the fusion calculus in this paper are the following. We give a structured operational semantics in the traditional style. The novelty lies in a new kind of action, fusion actions for emulating updates of a shared state. We prove that the calculus contains the /spl pi/-calculus as a subcalculus. We define and motivate the bisimulation equivalence and prove a simple characterization of its induced congruence, which is given two versions of a complete axiomatization for finite terms. The expressive power of the calculus is demonstrated by giving a straight-forward encoding of the strong lazy /spl lambda/-calculus, which admits reduction under /spl lambda/ abstraction.},
  keywords = {Calculus,Computational modeling,Concurrent computing,Costs,Encoding,Input variables},
  file = {/home/leon/Zotero/storage/SP28LAVA/Parrow and Victor - 1998 - The fusion calculus expressiveness and symmetry in mobile processes.pdf;/home/leon/Zotero/storage/3AYHG66I/705654.html}
}

@article{petersComparingProcessCalculi2019,
  title = {Comparing {{Process Calculi Using Encodings}}},
  author = {Peters, Kirstin},
  year = {2019},
  month = aug,
  journal = {Electron. Proc. Theor. Comput. Sci.},
  volume = {300},
  pages = {19--38},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.300.2},
  urldate = {2024-10-19},
  langid = {english},
  file = {/home/leon/Zotero/storage/2QFAGMD8/Peters - 2019 - Comparing Process Calculi Using Encodings.pdf}
}

@incollection{vanglabbeekBranchingTimeModel2017,
  title = {A {{Branching Time Model}} of {{CSP}}},
  booktitle = {Concurrency, {{Security}}, and {{Puzzles}}: {{Essays Dedicated}} to {{Andrew William Roscoe}} on the {{Occasion}} of {{His}} 60th {{Birthday}}},
  author = {{van Glabbeek}, Rob},
  editor = {{Gibson-Robinson}, Thomas and Hopcroft, Philippa and Lazi{\'c}, Ranko},
  year = {2017},
  pages = {272--293},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-319-51046-0_14},
  urldate = {2024-10-19},
  abstract = {I present a branching time model of CSP that is finer than all other models of CSP proposed thus far. It is obtained by taking a semantic equivalence from the linear time -- branching time spectrum, namely divergence-preserving coupled similarity, and showing that it is a congruence for the operators of CSP. This equivalence belongs to the bisimulation family of semantic equivalences, in the sense that on transition systems without internal actions it coincides with strong bisimilarity. Nevertheless, enough of the equational laws of CSP remain~to obtain a complete axiomatisation for closed, recursion-free terms.},
  isbn = {978-3-319-51046-0},
  langid = {english},
  keywords = {Communicate Sequential Process,Internal Action,Label Transition System,Operational Semantic,Parallel Composition},
  file = {/home/leon/Zotero/storage/3XI5G6GY/van Glabbeek - 2017 - A Branching Time Model of CSP.pdf}
}

@inproceedings{vanglabbeekExpressivenessACP1995,
  title = {On the {{Expressiveness}} of {{ACP}}},
  booktitle = {Algebra of {{Communicating Processes}}},
  author = {{van Glabbeek}, Rob},
  editor = {Ponse, A. and Verhoef, C. and {van Vlijmen}, S. F. M.},
  year = {1995},
  pages = {188--217},
  publisher = {Springer London},
  address = {London},
  abstract = {DeSimone showed that a wide class of languages, including CCS, SCCS, CSP and ACP, are expressible up to strong bisimulation equivalence in Meije. He also showed that every recursively enumerable process graph is representable by a Meije expression. Meije in turn is expressible in aprACP (ACP with action prefixing instead of sequential composition).},
  isbn = {978-1-4471-2120-6},
  file = {/home/leon/Zotero/storage/5T7JXJEF/van Glabbeek - 1995 - On the Expressiveness of ACP.pdf}
}
